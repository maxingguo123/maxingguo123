<source>
  @id test_meta_file
  @type tail
  path /var/log/atscale/test-metadata.ndjson
  format json
  read_lines_limit 1
  read_from_head true
  tag metadata.test
</source>

# Add test metadata
# __dummy*__ are temporary keys that will be discarded later
# Instead of assigning values to these keys, we have ruby snippet that will update record with metadata

<filter **>
  @type record_modifier
  prepare_value $test_metadata = Hash.new

# Cache metadata in global variable
  <record>
    __dummy1__ ${(tag == 'metadata.test') ? ($test_metadata=record.clone) : nil}
  </record>

# If the log doesn't have a field called "metadata", add an empty hash
  <record>
    __dummy2__ ${!tag.start_with?('metadata.') && !record.key?("metadata") ? record["metadata"]=Hash.new : nil}
  </record>

# Copy cached metadata to log
  <record>
    __dummy3__ ${ (!tag.start_with?('metadata.') && !$test_metadata.nil?) ? record["metadata"]["test"]=$test_metadata : nil}
  </record>

  remove_keys __dummy1__, __dummy2__, __dummy3__

</filter>

<source>
  @id node_meta_file
  @type tail
  path /var/log/atscale/node-metadata.ndjson
  format json
  read_lines_limit 1
  read_from_head true
  tag metadata.node
</source>

# Add node metadata
<filter **>
  @type record_modifier
  prepare_value $node_metadata = Hash.new


# Cache metadata in global variable
  <record>
    __dummy1__ ${(tag == 'metadata.node') ? ($node_metadata=record.clone) : nil}
  </record>

# If the log doesn't have a field called "metadata", add an empty hash
  <record>
    __dummy2__ ${!tag.start_with?('metadata.') && !record.key?("metadata") ? record["metadata"]=Hash.new : nil}
  </record>

# Copy cached metadata to log
  <record>
    __dummy3__ ${(!tag.start_with?('metadata.') && !$node_metadata.nil?) ? record["metadata"]["node"]=$node_metadata : nil}
  </record>

  remove_keys __dummy1__, __dummy2__, __dummy3__

</filter>

<source>
  @id cscope_metadata_file
  @type tail
  path /var/log/atscale/cscope-metadata.ndjson
  format json
  read_lines_limit 1
  read_from_head true
  tag metadata.cscope
</source>

# Add clusterscope metadata
<filter **>
  @type record_modifier
  prepare_value $cscope_metadata = Hash.new


# Cache metadata in global variable
  <record>
    __dummy1__ ${(tag == 'metadata.cscope') ? ($cscope_metadata=record.clone) : nil}
  </record>

# If the log doesn't have a field called "metadata", add an empty hash
  <record>
    __dummy2__ ${!tag.start_with?('metadata.') && !record.key?("metadata") ? record["metadata"]=Hash.new : nil}
  </record>

# Copy cached metadata to log
  <record>
    __dummy3__ ${(!tag.start_with?('metadata.') && !$cscope_metadata.nil?) ? record["metadata"]["cscope"]=$cscope_metadata : nil}
  </record>

  remove_keys __dummy1__, __dummy2__, __dummy3__

</filter>

<match metadata.**>
  @type null
</match>
