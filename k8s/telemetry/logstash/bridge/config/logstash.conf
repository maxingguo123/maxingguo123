input {
  kafka {
    bootstrap_servers => "{{range $.Values.kafka}}{{.host}}:{{.port}},{{end}}"
    topics => ["{{$.Values.topic}}"]
    group_id => "{{$.Release.Name}}"
    consumer_threads => {{$.Values.threads}}
    auto_offset_reset => "earliest"
    max_partition_fetch_bytes => "5242880"
    decorate_events => true
    codec => "json"
  }
}

filter {

  mutate {
    add_field => { "kafka_offset" =>  "%{[@metadata][kafka][offset]}" }
    add_field => { "logstash_time" => "%{@timestamp}" }
  }

  {{if .Values.customFilters}}
  {{.Values.customFilters}} 
  {{end}}

  # Logstash doesn't support nanosecond reolution yet.
  # Extract "@timestamp" field from timestamp_ns
  date {
    match => [ "timestamp_ns", "ISO8601" ]
  }

  ruby {
    init => "require 'time'"
    code => "now = Time.now
             event.set('[@metadata][es_suffix]', now.strftime('%Y.%m.%d'))"
  }

  {{if .Values.throttle}}
  if "{{.Values.throttle.message}}" in [message] {
    mutate {
      add_field => { "stripped_message" => "{{.Values.throttle.message}}" }
    }
  } else {
    # Kafka offsets are always unique. So stripped_message is always unique for other messages
    # This will ensure no other message gets throttled
    mutate {
      add_field => { "stripped_message" =>  "%{[@metadata][kafka][offset]}" }
    }
  }
  throttle {
    before_count => {{.Values.throttle.before_count}}
    after_count => {{.Values.throttle.after_count}}
    period => {{.Values.throttle.period}}
    max_age => {{.Values.throttle.max_age}}
    key => "%{host}%{stripped_message}"
    add_tag => "throttled"
  }
  if "throttled" in [tags] {
    drop { }
  }
    mutate { remove_field => [ "stripped_message" ] }
  {{end}}
}

output {
  # sink {}

  elasticsearch {
    index => "{{.Values.esindex}}-%{[@metadata][es_suffix]}"
    hosts => [ "{{range .Values.elasticsearch.hosts}}{{$.Values.elasticsearch.scheme}}://{{.host}}:{{.port}}{{end}}" ]
    user => "{{.Values.elasticsearch.user}}"
    password => "{{.Values.elasticsearch.password}}"
    ssl_certificate_verification => false
    {{if .Values.elasticsearch.cert}}
    cacert => "/elastic-cert/ca.crt"
    {{end}}
  }
}
