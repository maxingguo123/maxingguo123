// Pipeline specific variables

def cluster="spr"
def def_list = ["mixer/paiv-mixer-nodragon"]
//def def_list = ["sandstone/sandstone-release","sandstone/sandstone-combo","google-stressapp/google-stressapp","helpers/idle"]
//def jasper_list = ["jasper/cpu-check","jasper/povray","jasper/hackbench","jasper/specjbb","jasper/unixbench","jasper/stressapptest","jasper/mprime","jasper/lzbench","jasper/python-data-science","jasper/python-mega-pytest","jasper/nss","jasper/mkl-dnn","jasper/ffmpeg","jasper/fio","jasper/mlc","jasper/gmp","jasper/openblas","jasper/eigen","google-stressapp/google-stressapp","imunch/imunch","imunch-replay/imunch-replay","helpers/idle"]
//def ive_list = ["ive-fio/ive-fio","ive-benchdnn/ive-benchdnn","ive-stressng/ive-stressng","ive-mprime/ive-mprime","ive-geekbench/ive-geekbench","ive-stressapptest/ive-stressapptest","ive-ycruncher/ive-ycruncher","ive-ptustress/ive-ptustress"]
//def jasper_list = ["jasper/eigen","jasper/nss","jasper/fio","jasper/unixbench","jasper/povray","jasper/iperf","jasper/mlc","jasper/cpu-check","jasper/specjbb","jasper/stressapptest","jasper/mprime","jasper/lzbench","jasper/python-data-science","jasper/python-mega-pytest","jasper/mkl-dnn","jasper/ffmpeg","jasper/gmp","jasper/kvm-unit-tests","jasper/cloud-hypervisor"]
def test_list =  def_list

def NS="adl-mtl-test"
def KUBECONFIG="--kubeconfig=/srv/kube/config.icx-1"
def JENKINS_NODE_LABEL="adl-mtl-test"

pipeline {
  agent { label 'common' }
  stages {
    stage("Tests") {
      steps {
        script {
          test_list.each { test ->
          stage(test) {
            catchError {
                run_job("${env.WORKSPACE}/${test}.${cluster}")
            }
          }
        }
       }
      }
    }
  }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "adl-mtl-test"
  env.JENKINS_NODE_LABEL = "adl-mtl-test"
  env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.icx-1"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
