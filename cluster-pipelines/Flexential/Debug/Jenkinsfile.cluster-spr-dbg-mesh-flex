// Pipeline specific variables

def cluster="spr"
def NS="${params.NS}"
def KUBECONFIG="--kubeconfig=/srv/kube/config.flex"
def JENKINS_NODE_LABEL="${params.JENKINS_NODE_LABEL}"

def def_list = ["mesh-stress/mesh-stress"]
def test_list = def_list


pipeline {
  agent { label 'piv' }
    environment {
    KUBECTL_ARGS = "${KUBECONFIG}"
    JENKINS_NODE_LABEL = "${JENKINS_NODE_LABEL}"
    NS = "${NS}"
    }
  stages {

    stage("WORKLOADS") {
      steps {
        script {
          test_list.each { test ->
          stage(test) {
            catchError {
              run_job("${env.WORKSPACE}/${test}.${cluster}")
            }
          }
          }
        }
      }
    }

  
  }

post {
       always {
          script {
                    def looprequired="${params.LOOP_REQUIRED}"
                    if ("${looprequired}"=="true" && "${currentBuild.result}"!="ABORTED")
                    {
                    stage("Going to run pipeline in loop now...") {
                   catchError {
                     build(job: "/Flexential/Debug pipelines/SPR-DBG-MESH-CONCURRENT-FLEX", parameters: [string(name: "NS", value:"${params.NS}"), string(name: "JENKINS_NODE_LABEL", value:  "${params.JENKINS_NODE_LABEL}"), string(name: "LOOP_REQUIRED", value: "${params.LOOP_REQUIRED}")],wait:false)
                     currentBuild.result = 'SUCCESS'
                     return
                    }
                  }
                }
             }
           }
      }

}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  //env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.flex"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
