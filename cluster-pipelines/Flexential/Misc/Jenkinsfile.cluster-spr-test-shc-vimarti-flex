// Pipeline specific variables

def cluster="spr"
def test_list = ["shc/shc-test"]
//def test_list = ["shc/shc-test","high-freq-sweep/high-freq-sweep"]
def NS="spr-test-shc-vimarti"
def KUBECONFIG="--kubeconfig=/srv/kube/config.flex"
def JENKINS_NODE_LABEL="spr-test-shc-vimarti"

pipeline {
  agent { label 'piv' }
  stages {

      stage("WORKLOADS") {
          steps {
              script {
                  test_list.each { test ->
                  stage(test) {
                      catchError {
                          run_job("${env.WORKSPACE}/${test}.${cluster}")
                      }
                  }
                  }
              }
          }
      }

       /*stage("WARM RESET HIGH-FREQ") {
            steps {
                script {
                  stage("RF-cycles-in-warm") {
                      catchError {
                         build(job: "Tests/cycle-in-reboot", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "JENKINS_NODE_LABEL", value:  "${JENKINS_NODE_LABEL}"), string(name: "REBOOT_TYPE", value: "rf_warm"), string(name: "CYCLES", value: "1"), string(name: "SS", value: "FALSE")])
                      }
                  }
                }
            }
        }

    stage("NUMA VERIFICATION") {
      steps {
        script {
          stage("numa knobs/test") {
            catchError {
                build(job: "Tests/numa-verfication", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
            }
          }
        }
      }
    }*/

  }     
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "spr-test-shc-vimarti"
  env.JENKINS_NODE_LABEL = "spr-test-shc-vimarti"
  env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.flex"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
