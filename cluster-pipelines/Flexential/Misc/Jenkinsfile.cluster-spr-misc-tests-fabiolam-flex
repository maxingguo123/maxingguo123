// Pipeline specific variables

def cluster="spr"
def test_list_1 = ["sandstone/sandstone","sandstone/sandstone-release","sandstone/sandstone-combo","TSL/TSL","shc/shc","imunch/imunch"]
def test_list_2 = ["sandstone/sandstone","sandstone/sandstone-release","sandstone/sandstone-combo","TSL/TSL","shc/shc","imunch/imunch"]
def test_list = test_list_1 + test_list_2
def NS="spr-misc-tests-fabiolam"
def KUBECONFIG="--kubeconfig=/srv/kube/config.flex"
def JENKINS_NODE_LABEL="spr-misc-tests-fabiolam"

pipeline {
  agent { label 'common' }
  stages {
    stage("Tests") {
      steps {
        script {
          test_list.each { test ->
          stage(test) {
            catchError(catchInterruptions: false) {
                run_job("${env.WORKSPACE}/${test}.${cluster}")
            }
          }
          }
        }
      }
    }
  }
  
      post {
            aborted {
                script{
                    stage("aborted/cancelled tasks from jenkin UI..Huh..Going to call Tests/clean-namespaces") {
                        catchError(catchInterruptions: false) {
                            build(job: "Tests/clean-namespaces", parameters:  [string(name: "NS", value: "${NS}"), string(name: "CLUSTER", value: "${cluster}"), string(name: "PO", value: "TRUE")])
                        }
                    }
                }
            }
        }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "spr-misc-tests-fabiolam"
  env.JENKINS_NODE_LABEL = "spr-misc-tests-fabiolam"
  env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.flex"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
