// Pipeline specific variables

def cluster="spr"
def NS="spr-ras-test-kyle"
def KUBECONFIG="--kubeconfig=/srv/kube/config.flex"
def JENKINS_NODE_LABEL="spr-ras-test-kyle"

pipeline {
  agent { label 'common' }
  stages {

    stage("RAS") {
      steps {
        script {
          stage("ras/knobs-start") {
            catchError {
                build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "WheaErrorInjSupportEn=1,WheaErrInjEn=1,RasLogLevel=0,serialDebugMsgLvl=0"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
            }
          }
          stage("ras/ras") {
            catchError {
                run_job("${env.WORKSPACE}/ras/ras.${cluster}")
            }
          }
          stage("ras/knobs-end") {
            catchError {
                build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "WheaErrorInjSupportEn=0,WheaErrInjEn=1,RasLogLevel=1,serialDebugMsgLvl=4"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
            }
          }
        }
      }
    }

  }
         post {
            aborted {
                script{
                    stage("aborted/cancelled tasks from jenkin UI..Huh..Going to call Tests/clean-namespaces") {
                        catchError(catchInterruptions: false) {
                            build(job: "Tests/clean-namespaces", parameters:  [string(name: "NS", value: "${NS}"), string(name: "CLUSTER", value: "${cluster}"), string(name: "PO", value: "TRUE")])
                        }
                    }
                }
            }
        }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "spr-ras-test-kyle"
  env.JENKINS_NODE_LABEL = "spr-ras-test-kyle"
  env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.flex"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
