// Pipeline specific variables

def cluster="spr"

//def ive_list = ["ive-bert-large-training/ive-bert-large","ive-dien-amx-b16/ive-dien-amx-b16","ive-vgg19-training/ive-vgg19-training","ive-cnn-training/ive-cnn-training","ive-iperf/ive-iperf","ive-omnetpp/ive-omnetpp","ive-linpack/ive-linpack","ive-stream/ive-stream","ive-hpcg/ive-hpcg","ive-mlc/ive-mlc","ive-imunch/ive-imunch","ive-benchdnn-ptu/ive-benchdnn-ptu","ive-corefreq-prime95/ive-corefreq-prime95"]
//def test_list = ["dram-bank-stress/dram-bank-stress","dsa-iax-bkc/dsa-iax-bkc","sriov-mixer/sriov-mixer"]
//def pnp_list = ["paiv-pnp/linpack/linpack_avx2", "paiv-pnp/linpack/linpack_avx512", "paiv-pnp/ai/ai_resnet50_inference", "paiv-pnp/speccpu/specrate2017-int", "paiv-pnp/speccpu/specrate2017-fp", "paiv-pnp/stream/stream_sse", "paiv-pnp/stream/stream_avx2", "paiv-pnp/stream/stream_avx512", "paiv-pnp/mlc/mlc_bandwidth", "paiv-pnp/mlc/mlc_idle_latency"]
//def KINGKONG_IMG="kingkong_sqrt-v0.95.2.1"
//def SPEEDVALUE='"25"'
//def test_list2 = ["TSL/TSL","jasper/cpu-check","ive-resnet50-legacy/ive-resnet50-legacy","ive-resnet50-amx/ive-resnet50-amx","ive-mobilenet-amx-b16/ive-mobilenet-amx-b16","ive-corefreq-v1p1/ive-corefreq-v1p1","ive-gromacs/ive-gromacs","ive-vt-suite/ive-vt-suite-createteardown"]

def KUBECONFIG="--kubeconfig=/srv/kube/config.icx-1"
def JENKINS_NODE_LABEL="spr-test-content"
def NS="spr-test-content"

pipeline {
  agent { label "common" }
  stages {

   /*   stage("WORKLOADS") {
          steps {
              script {
                  pnp_list.each { test ->
                  stage(test) {
                      catchError {
                          run_job("${env.WORKSPACE}/${test}.${cluster}")
                      }
                  }
                  }
              }
          }
      } */
      
     /* stage("RAS-DRAM-BANK") {
        steps {
          script {
            stage("ras/knobs-start") {
              catchError {
                  build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "WheaErrorInjSupportEn=1,WheaErrInjEn=1,RasLogLevel=0,serialDebugMsgLvl=0"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
              }
            }
            stage("dram-bank-stress-ras") {
              catchError {
                  run_job("${env.WORKSPACE}/dram-bank-stress/dram-bank-stress-ras.${cluster}")
              }
            }
            stage("ras/knobs-end") {
              catchError {
                  build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "WheaErrorInjSupportEn=0,WheaErrInjEn=1,RasLogLevel=1,serialDebugMsgLvl=4"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
              }
            }
          }
        }
      }*/
    
  /*    stage("DSA-IAX-BKC") {
        steps {
          script {
            stage("dsa-iax-bkc/knobs-start") {
              catchError {
                  build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "VTdSupport=0x1,PcieEnqCmdSupport=0x1,InterruptRemap=0x1,ProcessorVmxEnable=0x1"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
              }
            }
            stage("dsa-iax-bkc/kernel-start") {
              catchError {
                  build(job: "Tests/kernelcli_run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KERNEL_PARAMETERS", value: "intel_iommu=on,sm_on,iommu=pt,iommu=on no5lvl,hugepages=512"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
              }
            }
          
            stage("dsa-iax-bkc") {
              catchError {
                  run_job("${env.WORKSPACE}/dsa-iax-bkc/dsa-iax-bkc.${cluster}")
              }
            }
          
            stage("dsa-perf-micros") {
              catchError {
                  run_job("${env.WORKSPACE}/jasper/dsa-perf-micros.${cluster}")
              }
            }
          
            stage("dsa-iax-bkc/kernel-end") {
              catchError {
                  build(job: "Tests/kernelcli_run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KERNEL_PARAMETERS", value: "intel_iommu=on,iommu=pt,iommu=on,hugepages=1024"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
              }
            }
          
            stage("dsa-iax-bkc/knobs-end") {
              catchError {
                  build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "VTdSupport=0x1,PcieEnqCmdSupport=0x0,InterruptRemap=0x2,ProcessorVmxEnable=0x1"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
              }
            }
          }
        }
      }  */
      
    stage("TGEN") {
      steps {
        script {
          stage("tgen-stress-test") {
            catchError {
                run_job("${env.WORKSPACE}/tgen/tgen.${cluster}")
            }
          }
        }
      }
    }   
          
    stage("SRIOV-RANDOM-MIX") {
      steps {
        script {
          stage("sriov-random-mix") {
            catchError {
                run_job("${env.WORKSPACE}/sriov-mixer/sriov-mixer.${cluster}")
            }
          }
        }
      }
    } 
      /*stage("KK INITIAL KNOBS") {
          steps {
              script {
                  stage("kk/knobs-start") {
                      catchError {
                          build (job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "DFXEnable=0x1,DfxDisableBiosDone=0x0"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                      }
                  }
              }
          }
      }

      stage("READ/SET FAN") {
          steps {
              script {
                  stage("Reading - pre fan") {
                      catchError {
                          build(job: "Tests/Development/kong-test-read-registers", parameters:  [string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value: "${NS}"), string(name: "JENKINS_TEST_TAG", value: "${KINGKONG_IMG}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])                      
                      }
                  }
                  stage("Changing Fan Speed - pre kong") {
                      catchError {
                          build(job: "Tests/Development/ipmi-fan-speed", parameters:  [string(name: "SPEEDMODE", value: "set"), string(name: "SPEEDVALUE", value: "${SPEEDVALUE}"), string(name: "NODELABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])
                      }
                  }
              }
          }
      }

      stage("READ/RUN KK") {
          steps {
              script {
                  stage("Reading - pre kong") {
                      catchError {
                          build(job: "Tests/Development/kong-test-read-registers", parameters:  [string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value: "${NS}"), string(name: "JENKINS_TEST_TAG", value: "${KINGKONG_IMG}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])
                      }
                  }
                  stage("Running KK") {
                      catchError {
                          build(job:"Tests/Development/kingkong-test", parameters:  [string(name: "TEST", value: "kong"), string(name: "JENKINS_TEST_TAG", value: "${KINGKONG_IMG}"), string(name: "NS", value: "${NS}"), string(name: "JENKINS_NODE_LABEL", value:"${JENKINS_NODE_LABEL}"), string(name: "KUBECTL_ARGS", value:"${KUBECONFIG}")])
                      }
                  }
                  stage("Reading - post kong") {
                      catchError {
                          build(job: "Tests/Development/kong-test-read-registers", parameters:  [string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value: "${NS}"), string(name: "JENKINS_TEST_TAG", value: "${KINGKONG_IMG}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])                      
                      }
                  }
              }
          }
      }

      stage("FAN RESET/REBOOT/RUN PTU") {
          steps {
              script {
                  stage("Resetting Fan Speed - post kong") {
                      catchError {
                          build(job: "Tests/Development/ipmi-fan-speed", parameters:[string(name: "NODELABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value:"${NS}"), string(name: "SPEEDMODE", value: "reset"), string(name: "SPEEDVALUE", value: "${SPEEDVALUE}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])
                      }
                  }
                  stage("Reading - 4 - pre reboot") {
                      catchError {
                          build(job: "Tests/Development/kong-test-read-registers", parameters:  [string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value: "${NS}"), string(name: "JENKINS_TEST_TAG", value: "${KINGKONG_IMG}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])                      
                      }
                  }
                  stage("Warm Rebooting") {
                      catchError {
                          build(job: "Tests/reboot-idle", parameters:  [string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "REBOOT_TYPE", value:"warm"), string(name: "CYCLES", value:"1"), string(name: "IDLE", value:"FALSE")])
                      }
                  }
                  stage("Reading - post reboot") {
                      catchError {
                          build(job: "Tests/Development/kong-test-read-registers", parameters:  [string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value: "${NS}"), string(name: "JENKINS_TEST_TAG", value: "${KINGKONG_IMG}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])                      
                      }
                  }
                  stage("Changing Fan Speed - pre ptu") {
                      catchError {
                          build(job: "Tests/Development/ipmi-fan-speed", parameters:  [string(name: "SPEEDMODE", value: "set"), string(name: "SPEEDVALUE", value: "${SPEEDVALUE}"), string(name: "NODELABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])
                      }
                  }
                  stage("Reading - pre ptu") {
                      catchError {
                          build(job: "Tests/Development/kong-test-read-registers", parameters:  [string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value: "${NS}"), string(name: "JENKINS_TEST_TAG", value: "${KINGKONG_IMG}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])                      
                      }
                  }
                  stage("Running PTU") {
                      catchError {
                          build(job:"Tests/Development/kingkong-test", parameters:  [string(name: "TEST", value: "ptu"), string(name: "JENKINS_TEST_TAG", value: "${KINGKONG_IMG}"), string(name: "NS", value: "${NS}"), string(name: "JENKINS_NODE_LABEL", value:"${JENKINS_NODE_LABEL}"), string(name: "KUBECTL_ARGS", value:"${KUBECONFIG}")])
                      }
                  }
                  stage("Reading - post ptu") {
                      catchError {
                          build(job: "Tests/Development/kong-test-read-registers", parameters:  [string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value: "${NS}"), string(name: "JENKINS_TEST_TAG", value: "${KINGKONG_IMG}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])                      
                      }
                  }
                  stage("Resetting Fan Speed - 2 - post ptu") {
                      catchError {
                          build(job: "Tests/Development/ipmi-fan-speed", parameters:[string(name: "NODELABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value:"${NS}"), string(name: "SPEEDMODE", value: "reset"), string(name: "SPEEDVALUE", value: "${SPEEDVALUE}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])
                      }
                  }
                  stage("Reading - pre ptu reboot") {
                      catchError {
                          build(job: "Tests/Development/kong-test-read-registers", parameters:  [string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value: "${NS}"), string(name: "JENKINS_TEST_TAG", value: "${KINGKONG_IMG}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}")])                      
                      }
                  }
                  stage("Warm Rebooting - ptu") {
                      catchError {
                          build(job: "Tests/reboot-idle", parameters:  [string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}"), string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "REBOOT_TYPE", value:"warm"), string(name: "CYCLES", value:"1"), string(name: "IDLE", value:"FALSE")])
                      }
                  }
              }
          }
      }

      stage("KK ROLLBACK KNOBS") {
          steps {
              script {
                  stage("kk/knobs-end") {
                      catchError {
                          build (job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "DFXEnable=0x0,DfxDisableBiosDone=0x0"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                      }
                  }
              }
          }
      }*/
     /* stage("DSA-IAX-SIOV") {
      steps {
        script {
          stage("dsa-iax-siov/knobs-start") {
            catchError {
                build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "VTdSupport=0x1,PcieEnqCmdSupport=0x1,InterruptRemap=0x1,ProcessorVmxEnable=0x1"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
            }
          }
          stage("dsa-iax-siov/kernel-start") {
            catchError {
                build(job: "Tests/kernelcli_run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KERNEL_PARAMETERS", value: "intel_iommu=on,sm_on,iommu=pt,iommu=on no5lvl,hugepages=512"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
            }
          }
          
          stage("dsa-iax-siov") {
            catchError {
                run_job("${env.WORKSPACE}/dsa-iax-siov/dsa-iax-siov.${cluster}")
            }
          }
          
          stage("dsa-perf-micros") {
            catchError {
                run_job("${env.WORKSPACE}/jasper/dsa-perf-micros.${cluster}")
            }
          }
          
          stage("dsa-iax-siov/kernel-end") {
            catchError {
                build(job: "Tests/kernelcli_run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KERNEL_PARAMETERS", value: "intel_iommu=on,iommu=pt,iommu=on,hugepages=1024"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
            }
         }
          
          stage("dsa-iax-siov/knobs-end") {
            catchError {
                build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "VTdSupport=0x1,PcieEnqCmdSupport=0x0,InterruptRemap=0x2,ProcessorVmxEnable=0x1"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
            }
          }
        }
      }
    }*/

  }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "spr-test-content"
  env.JENKINS_NODE_LABEL = "spr-test-content"
  env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.icx-1"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
      base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
