// Pipeline specific variables

def cluster="icx-1"
def def_list = ["vr-margin/vr-margin-start","sandstone/sandstone-combo","imunch/imunch","imunch-replay/imunch-replay","vr-margin/vr-margin-end"]
def test_list = def_list
def KUBECONFIG="--kubeconfig=/srv/kube/config.icx-1"
def NS = "vrmargin"
def JENKINS_NODE_LABEL = "craig-test"
def KNOBS_INIT="PchAllUnLock=1,PchGpioLockDown=0"


pipeline {
  agent { label 'common' }
  stages {
    stage("BIOS KNOBS") {
        steps {
            script {
                stage("knobs-start") {
                    catchError {
                    build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${KNOBS_INIT}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                    }
                }
            }
        }
    }    
    stage("Tests") {
      steps {
        script {
          test_list.each { test ->
          stage(test) {
            catchError {
                run_job("${env.WORKSPACE}/${test}.${cluster}")
            }
          }
        }}
      }
    }
  }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "vrmargin"
  env.JENKINS_NODE_LABEL = "craig-test"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
