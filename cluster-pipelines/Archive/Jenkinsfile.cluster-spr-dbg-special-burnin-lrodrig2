def cluster="spr"

def def_list = ["helpers/idle"]
def test_list = def_list

def NS="spr-dbg-special-burnin-lrodrig2"
def KUBECONFIG="--kubeconfig=/srv/kube/config.icx-1"
def JENKINS_NODE_LABEL="spr-dbg-special-burnin-lrodrig2"

def RMT_KNOBS_ROLLBACK="bdatEn=1,EnableEvLoader=0,EnableRMT=0,RMTPerBitMargining=1,RMTBacksideMargining=0,AttemptFastBoot=1,AttemptFastBootCold=1,EnableRMTonFCB=0,AllowedSocketsInParallel=0"
def RMT_KNOBS_INIT="bdatEn=1,EnableEvLoader=1,EnableRMT=1,RMTPerBitMargining=1,RMTBacksideMargining=1,AttemptFastBoot=0,AttemptFastBootCold=0,EnableRMTonFCB=0,AllowedSocketsInParallel=1"

pipeline {
    agent { label 'common' }
    stages {

        stage("COLD RESET") {
            steps {
                script {
                    stage("RF-cycles-in-cold") {
                        catchError {
                           build(job: "Tests/cycle-in-reboot", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "JENKINS_NODE_LABEL", value:  "${JENKINS_NODE_LABEL}"), string(name: "REBOOT_TYPE", value: "rf_cold"), string(name: "CYCLES", value: "10")])
                        }
                    }
                }
            }
        }

        stage("Tests") {
            steps {
                script {
                    test_list.each { test ->
                    stage(test) {
                        catchError {
                            run_job("${env.WORKSPACE}/${test}.${cluster}")
                            }
                        }
                    }
                }
            }
        }

        stage("BIOS KNOBS") {
                steps {
                    script {
                        stage("rmt-knobs-start") {
                            catchError {
                            build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${RMT_KNOBS_INIT}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                            }
                        }
                    }
                }
            }
        
        stage("ROLLBACK") {
            steps {
                script {
                    stage("rmt-knobs-rollback") {
                       catchError {
                            build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${RMT_KNOBS_ROLLBACK}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                       }
                    }
                }
            }
        }
        stage("BIOS KNOBS 2") {
            steps {
                script {
                     stage("rmt-knobs-start") {
                        catchError {
                        build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${RMT_KNOBS_INIT}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                            }
                        }
                    }
                }
            }
        
        stage("ROLLBACK 2") {
            steps {
                script {
                    stage("rmt-knobs-rollback") {
                       catchError {
                            build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${RMT_KNOBS_ROLLBACK}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                       }
                    }
                }
            }
        }
        stage("BIOS KNOBS 3") {
            steps {
                script {
                    stage("rmt-knobs-start") {
                        catchError {
                            build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${RMT_KNOBS_INIT}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                            }
                        }
                    }
                }
            }
        
        stage("ROLLBACK 3") {
            steps {
                script {
                    stage("rmt-knobs-rollback") {
                       catchError {
                            build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${RMT_KNOBS_ROLLBACK}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                       }
                    }
                }
            }
        }
        stage("BIOS KNOBS 4") {
            steps {
                script {
                    stage("rmt-knobs-start") {
                        catchError {
                        build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${RMT_KNOBS_INIT}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                            }
                        }
                    }
                }
            }
       
        stage("ROLLBACK 4") {
            steps {
                script {
                    stage("rmt-knobs-rollback") {
                       catchError {
                            build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${RMT_KNOBS_ROLLBACK}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                       }
                    }
                }
            }
        }
        stage("BIOS KNOBS 5") {
            steps {
                script {
                    stage("rmt-knobs-start") {
                        catchError {
                        build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${RMT_KNOBS_INIT}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                            }
                        }
                    }
                }
            }
        
        stage("ROLLBACK 5") {
            steps {
                script {
                    stage("rmt-knobs-rollback") {
                       catchError {
                            build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "${RMT_KNOBS_ROLLBACK}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
                       }
                    }
                }
            }
        }   

        stage("Tests 2") {
            steps {
                script {
                    test_list.each { test ->
                    stage(test) {
                        catchError {
                            run_job("${env.WORKSPACE}/${test}.${cluster}")
                            }
                        }
                    }
                }
            }
        }
        
        stage("ADV MEM TEST") {
            steps {
                script {
                    stage("Adv memtest") {
                        catchError {
                           build(job: "Tests/Advance MemTest", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "JENKINS_NODE_LABEL", value:  "${JENKINS_NODE_LABEL}")])
                        }
                    }
                }
            }
        }
    }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.icx-1"
  env.NS = "spr-dbg-special-burnin-lrodrig2"
  env.JENKINS_NODE_LABEL = "spr-dbg-special-burnin-lrodrig2"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
