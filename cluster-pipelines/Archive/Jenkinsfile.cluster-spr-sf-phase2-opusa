// Pipeline specific variables

def cluster="spr"

def def_list1 = ["sandstone/sandstone-release","sandstone/sandstone","sandstone/sandstone-combo","tmul-amx/tmul-amx","benchdnn/benchdnn","dsa-stress/dsa-stress","jasper/combo-01","jasper/combo-02","jasper/combo-03","jasper/combo-05","mixer/mixer","ive-povray/ive-povray"]
def def_list2 = ["memory-subsystem/mlc","dpdk-vfio/dpdk-vfio","packer-qemu-mixed/packer-qemu-mixed","ive-vt/create-teardown"]
//def def_list1 = ["sgx/sgx-sandstone-graphene"]
def test_list = def_list1 + def_list2

def NS="spr-sf-phase2"
def KUBECONFIG="--kubeconfig=/srv/kube/config.opus"
def JENKINS_NODE_LABEL="spr-sf-phase2" 

pipeline {
  agent { label 'common' }
  stages {

    stage("WORKLOADS") {
      steps {
        script {
          test_list.each { test ->
          stage(test) {
            catchError {
              run_job("${env.WORKSPACE}/${test}.${cluster}")
            }
          }
          }
        }
      }
    }

    /*stage("RAS") {
      steps {
        script {
          stage("ras/knobs-start") {
            catchError {
                build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "WheaErrorInjSupportEn=1,WheaErrInjEn=1,RasLogLevel=0,serialDebugMsgLvl=0"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
            }
          }
          stage("ras/ras") {
            catchError {
                run_job("${env.WORKSPACE}/ras/ras.${cluster}")
            }
          }
          stage("ras/knobs-end") {
            catchError {
                build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "KNOBS", value: "WheaErrorInjSupportEn=0,WheaErrInjEn=1,RasLogLevel=1,serialDebugMsgLvl=4"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
            }
          }
        }
      }
    }*/

    /*stage("WORKLOADS2") {
      steps {
        script {
          def_list2.each { test ->
          stage(test) {
            catchError {
              run_job("${env.WORKSPACE}/${test}.${cluster}")
            }
          }
          }
        }
      }
    }*/
  
  }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "spr-sf-phase2"
  env.JENKINS_NODE_LABEL = "spr-sf-phase2"
  env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.opus"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
