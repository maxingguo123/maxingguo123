// Pipeline specific variables

def cluster="spr"

def test_list = ["jasper/mlc","shc/shc","vss/vss","memory-subsystem/mlc","DOL/DOL","mesh-stress/mesh-stress","ive-povray/ive-povray","mixer/mixer","jasper/eigen","packer-qemu-mixed/packer-qemu-mixed","ive-stressng/ive-stressng","xprod-legacy/xprod-legacy","ive-stressapptest/ive-stressapptest"]

def KUBECONFIG="--kubeconfig=/srv/kube/config.opus"
def JENKINS_NODE_LABEL="spr-test-memory-subsystem"
def NS="spr-test-memory-subsystem"

pipeline {
  agent { label "common" }
  stages {
    
    stage("MLC-MULTI") {
      steps {
        script {
          stage("mlc-multi test") {
            catchError {
              build(job: "Tests/spr-mlc-multi", parameters:  [string(name: "NS", value: "${NS}"), string(name: "KUBECONFIG", value: "${KUBECONFIG}"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
            }
          }
        }
      }
    }

     stage("Tests") {
      steps {
        script {
          test_list.each { test ->
          stage(test) {
            catchError {
                run_job("${env.WORKSPACE}/${test}.${cluster}")
            }
          }
          }
        }
      }
    }

  }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "spr-test-memory-subsystem"
  env.JENKINS_NODE_LABEL = "spr-test-memory-subsystem"
  env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.opus"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
