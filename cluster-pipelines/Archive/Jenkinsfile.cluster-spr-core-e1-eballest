// Pipeline specific variables

def cluster="spr"
//def def_list = ["sandstone/sandstone-combo","mesh-stress/mesh-stress","lemongrass/lemongrass","mixer/mixer"]
//def def_list = ["jasper/combo-01","jasper/combo-02","jasper/combo-03"]
//def def_list = ["jasper/combo-05"]
//def def_list = ["vss/vss"]
//def def_list = ["mesh-stress/mesh-stress","lemongrass/lemongrass","xprod-legancy-new/xprod-legancy-new"]
//def def_list = ["memory-subsystem/mlc","sandstone/sandstone-release","sandstone/sandstone","sandstone/sandstone-combo","DOL/DOL","tmul-amx/tmul-amx","benchdnn/benchdnn","shc/shc"]
//def sgx_list = ["sgx/sgx-sandstone-graphene","sgx/sgx-graphene-mlc","sgx/sgx-sdk"]
def def_list = ["mixer/mixer-old"]
def test_list = def_list

def NS="spr-core-e1-eballest"
def KUBECONFIG="--kubeconfig=/srv/kube/config.icx-1"
def JENKINS_NODE_LABEL="spr-core-e1-eballest"

pipeline {
  agent { label 'common' }
  stages {

    stage("WORKLOADS") {
      steps {
        script {
          test_list.each { test ->
          stage(test) {
            catchError {
              run_job("${env.WORKSPACE}/${test}.${cluster}")
            }
          }
          }
        }
      }
    }

        /*stage("WARM RESET") {
            steps {
                script {
                  stage("RF-cycles-in-warm") {
                      catchError {
                         build(job: "Tests/cycle-in-reboot", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "JENKINS_NODE_LABEL", value:  "${JENKINS_NODE_LABEL}"), string(name: "REBOOT_TYPE", value: "rf_warm"), string(name: "CYCLES", value: "1000"), string(name: "SS", value: "FALSE")])
                      }
                  }
                }
            }
        }

        stage("COLD RESET") {
            steps {
                script {
                    stage("RF-cycles-in-cold") {
                        catchError {
                           build(job: "Tests/cycle-in-reboot", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "JENKINS_NODE_LABEL", value:  "${JENKINS_NODE_LABEL}"), string(name: "REBOOT_TYPE", value: "rf_cold"), string(name: "CYCLES", value: "1000"), string(name: "SS", value: "FALSE")])
                        }
                    }
                }
            }
        }*/
  
  }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "spr-core-e1-eballest"
  env.JENKINS_NODE_LABEL = "spr-core-e1-eballest"
  env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.icx-1"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
