// Pipeline specific variables

def cluster="gdc-1"
def tsc_list = ["sandstone/sandstone-release", "sandstone/sandstone-release-oneoff", "sandstone/sandstone-combo", "dcdiag/dcdiag", "TSL/TSL", "imunch/imunch", "shc/shc", "DOL/DOL", "DOL/dol-google-skx", "jasper/iperf", "jasper/mlc", "jasper/fio", "pts/pts-coremark-v0.1", "xhpl-linpack/xhpl-linpack", "ive-stressapptest/ive-stressapptest", "spec2017/spec2017", "jasper/cloud-hypervisor", "jasper/kvm-unit-tests", "jasper/specjbb", "sysbench/sysbench", "vss/vss"]
def test_list = tsc_list 

def KUBECONFIG="--kubeconfig=/srv/kube/config.gdc-1"
def JENKINS_NODE_LABEL="unifiednode"
def NS="default"


pipeline {
  agent { label 'common' }
    stages {
      stage("Tests") {
        steps {
          script {
            test_list.each { test ->
              stage(test) {
                catchError {
                  run_job("${env.WORKSPACE}/${test}.${cluster}")
                }
              }
            }
          }
        }
      }
    }
    post {  
      aborted {
        script{
          stage("Cleanning aborted tasks") {
            catchError {
              build(job: "Tests/clean-namespaces", parameters:  [string(name: "NS", value: "${NS}"), string(name: "CLUSTER", value: "${cluster}"), string(name: "PO", value: "TRUE")])
            }
          }
        }
      }
    }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "default"
  env.JENKINS_NODE_LABEL = "unifiednode"
  env.KUBECTL_ARGS="--kubeconfig=/srv/kube/config.gdc-1"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}

