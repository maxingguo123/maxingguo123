def cluster="opusa"
def def_list = ["sandstone/sandstone-combo", "imunch-replay/imunch-replay", "imunch/imunch", "vss/vss", "cafe-dol/cafe-dol", "DOL/DOL"]//, "DOL/DOL2C"]
def test_list = def_list
def NS="bkc"
def KUBECONFIG="--kubeconfig=/srv/kube/config.opus"
def JENKINS_NODE_LABEL="bkc" 
//serialDebugMsgLvl=0x2

pipeline {
    agent { label 'common' }
    stages {
        /*
      stage("KNOBS INIT") {
       steps {
         script {
           stage("knobs-start") {
             catchError {
                 build(job: "Tests/xmlcli-run", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "KNOBS", value: "serialDebugMsgLvl=0x2"), string(name: "JENKINS_NODE_LABEL", value: "${JENKINS_NODE_LABEL}")])
             }
           }
          }
         }
        }*/
         stage("CYCLING") {
             steps {
                 script {
                     stage("cycles-in-warm") {
                        catchError {
                             build(job: "Tests/cycle-in-reboot", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "JENKINS_NODE_LABEL", value:  "${JENKINS_NODE_LABEL}"), string(name: "REBOOT_TYPE", value: "warm"), string(name: "CYCLES", value: "25")])
                             }
                         }
                     stage("cycles-in-cold") {
                        catchError {
                             build(job: "Tests/cycle-in-reboot", parameters:  [string(name: "NS", value:"${NS}"), string(name: "KUBECONFIG", value:"${KUBECONFIG}"), string(name: "JENKINS_NODE_LABEL", value:  "${JENKINS_NODE_LABEL}"), string(name: "CYCLES", value: "25")])
                             }
                         }
                     }
            }
         }
        stage("Tests") {
            steps {
                script {
                    test_list.each { test ->
                    stage(test) {
                        catchError {
                            run_job("${env.WORKSPACE}/${test}.${cluster}")
                            }
                        }
                    }
                }
            }
        }
    }
}




// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  base.init()
  env.NS = "bkc"
  env.JENKINS_NODE_LABEL = "bkc"
  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}

