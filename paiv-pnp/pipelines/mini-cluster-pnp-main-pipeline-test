// Pipeline specific variables

def cluster="debug"
//def test_list = ["paiv-pnp/stream/stream_avx2", "paiv-pnp/stream/stream_avx512", "paiv-pnp/stream/stream_sse", "paiv-pnp/mlc/mlc_bandwidth", "paiv-pnp/mlc/mlc_idle_latency", "paiv-pnp/mlc/mlc_loaded_latency", "paiv-pnp/linpack/linpack_avx2", "paiv-pnp/linpack/linpack_avx512", "paiv-pnp/ai/ai_resnet50_inference", "paiv-pnp/speccpu/specrate2017-fp", "paiv-pnp/speccpu/specrate2017-int"]
def test_list = ["paiv-pnp/specjbb/specjbb"]


def KUBECONFIG="--kubeconfig=/data_bck/kubeconfig/config"
def JENKINS_NODE_LABEL="ipu-pnp-icx-dry-run"
def NS="ipu-pnp-icx-dry-run"
pipeline {
  agent { label 'common' }
  stages {
    stage("Tests") {
      steps {
        script {
          test_list.each { test ->
          stage(test) {
            catchError {
                run_job("${env.WORKSPACE}/${test}.${cluster}")
            }
          }
        }}
      }
    }
  }
}

// Agnostic variables and functions
def private iter
def private base
def run_job(job_file) {
  base = load "${env.WORKSPACE}/base/base.groovy"
  job = load(job_file)
  env.KUBECTL_ARGS="--kubeconfig=/data_bck/kubeconfig/config"
  base.init()
  env.JENKINS_NODE_LABEL="ipu-pnp-icx-dry-run"
  env.NS="ipu-pnp-icx-dry-run"

  iter = (env.ITERATIONS as int) ?: (1 as int)
  for (int i = 0; i < iter; i++) {
    base.run(env.JOB_RUNTIME)
  }
  base.reset()
}
